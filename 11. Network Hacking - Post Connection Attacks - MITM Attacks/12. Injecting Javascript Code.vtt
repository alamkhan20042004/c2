WEBVTT

1
00:00:00.890 --> 00:00:03.470
<v Instructor>So far, we saw a number of things</v>

2
00:00:03.470 --> 00:00:07.020
that we can do once we become the man in the middle.

3
00:00:07.020 --> 00:00:11.080
So we saw how we can see anything target computer does

4
00:00:11.080 --> 00:00:11.960
on the network.

5
00:00:11.960 --> 00:00:15.130
So we were able to see the websites, the usernames,

6
00:00:15.130 --> 00:00:18.160
the passwords, the images, anything they load

7
00:00:18.160 --> 00:00:19.840
on their browser.

8
00:00:19.840 --> 00:00:22.440
We also saw that since we're the man in the middle,

9
00:00:22.440 --> 00:00:25.690
we're able to redirect them to other websites.

10
00:00:25.690 --> 00:00:27.630
So whenever they request a domain,

11
00:00:27.630 --> 00:00:29.880
we can redirect them to somewhere else

12
00:00:29.880 --> 00:00:32.674
by doing a DNS spoofing attack.

13
00:00:32.674 --> 00:00:35.750
Another really cool thing that we can do

14
00:00:35.750 --> 00:00:40.210
is modify the HTML, modify the pages,

15
00:00:40.210 --> 00:00:43.540
as they load on the target browser.

16
00:00:43.540 --> 00:00:45.440
Obviously, this is all possible

17
00:00:45.440 --> 00:00:47.300
because we are the man in the middle,

18
00:00:47.300 --> 00:00:50.270
because we're able to intercept all this data.

19
00:00:50.270 --> 00:00:52.670
So we can wait for the HTML code,

20
00:00:52.670 --> 00:00:56.430
which is the code that's responsible for loading web pages.

21
00:00:56.430 --> 00:00:58.830
And as it flows through our computer,

22
00:00:58.830 --> 00:01:02.260
we can insert any piece of code that we want,

23
00:01:02.260 --> 00:01:04.863
and the browser will execute this code.

24
00:01:05.730 --> 00:01:09.260
Now, HTML is only responsible for rendering the elements

25
00:01:09.260 --> 00:01:10.850
that you see on the web page.

26
00:01:10.850 --> 00:01:13.740
So it's responsible for the buttons,

27
00:01:13.740 --> 00:01:15.770
for the forums, for the text,

28
00:01:15.770 --> 00:01:18.610
it doesn't really allow us to do much.

29
00:01:18.610 --> 00:01:23.163
But modern browsers can execute JavaScript code.

30
00:01:24.010 --> 00:01:27.160
JavaScript is a powerful programming language

31
00:01:27.160 --> 00:01:30.300
that we can use to do so many things,

32
00:01:30.300 --> 00:01:32.470
we can actually modify the whole page,

33
00:01:32.470 --> 00:01:35.340
remove elements or add elements into the page,

34
00:01:35.340 --> 00:01:36.970
we can replace links.

35
00:01:36.970 --> 00:01:39.550
And this is actually what I did when I modified

36
00:01:39.550 --> 00:01:42.620
the HSTS plugin.

37
00:01:42.620 --> 00:01:47.150
So I added code that will replace the HTTPS with HTTP.

38
00:01:47.150 --> 00:01:50.790
And I also added code that will replace the actual link,

39
00:01:50.790 --> 00:01:54.140
the actual domain name with the spoof domain name,

40
00:01:54.140 --> 00:01:55.720
with the one with the dot corn,

41
00:01:55.720 --> 00:01:58.640
or to whatever you set it to in the script.

42
00:01:58.640 --> 00:02:02.200
You can even use it to hook the browser

43
00:02:02.200 --> 00:02:04.870
to other browser exploitation frameworks,

44
00:02:04.870 --> 00:02:07.740
which we can use to further exploit the target

45
00:02:07.740 --> 00:02:10.670
and even gain full control over their computer.

46
00:02:10.670 --> 00:02:13.570
And we'll see that later on in the course.

47
00:02:13.570 --> 00:02:17.110
But for now, I'm gonna show you how to inject a very simple

48
00:02:17.110 --> 00:02:20.360
JavaScript code into the loaded pages.

49
00:02:20.360 --> 00:02:23.180
And then we'll build up on that in future lectures

50
00:02:23.180 --> 00:02:27.350
and see how powerful and useful this can be.

51
00:02:27.350 --> 00:02:30.840
So right here, I have my Kali machine.

52
00:02:30.840 --> 00:02:33.130
And before I run better cap and show you

53
00:02:33.130 --> 00:02:35.000
how to inject JavaScript,

54
00:02:35.000 --> 00:02:38.050
first of all, we need to have some JavaScript code

55
00:02:38.050 --> 00:02:40.523
to inject into the target browser.

56
00:02:41.370 --> 00:02:44.079
So I'm gonna open a text editor.

57
00:02:44.079 --> 00:02:48.530
And I'm gonna write a very, very simple JavaScript code.

58
00:02:48.530 --> 00:02:51.330
Like I said, we will see how we can use this

59
00:02:51.330 --> 00:02:53.120
to run more useful code.

60
00:02:53.120 --> 00:02:55.830
But for now, we're keeping this simple just to see

61
00:02:55.830 --> 00:02:58.630
how we can actually run JavaScript code.

62
00:02:58.630 --> 00:03:02.850
So all I'm gonna do is alert, open a bracket,

63
00:03:02.850 --> 00:03:06.783
quotation mark and I'm gonna say JavaScript test.

64
00:03:08.630 --> 00:03:11.690
I'm gonna close the quotation mark and close the bracket

65
00:03:11.690 --> 00:03:14.110
and add a semicolon.

66
00:03:14.110 --> 00:03:16.440
So right here, this code, all it's gonna do

67
00:03:16.440 --> 00:03:20.310
is it's gonna display a warning message, an alert message

68
00:03:20.310 --> 00:03:22.690
saying JavaScript code.

69
00:03:22.690 --> 00:03:27.040
So since we're gonna try to inject this code into all pages,

70
00:03:27.040 --> 00:03:28.820
every time we load a web page,

71
00:03:28.820 --> 00:03:31.793
we should see a message saying JavaScript test.

72
00:03:32.860 --> 00:03:34.270
Now I'm gonna save this.

73
00:03:34.270 --> 00:03:37.410
So I'm gonna go to File, Save.

74
00:03:37.410 --> 00:03:40.270
And I'm gonna put this in my root directory.

75
00:03:40.270 --> 00:03:45.270
And I'm just gonna call it alert.js,

76
00:03:45.480 --> 00:03:47.200
I'm gonna hit Enter.

77
00:03:47.200 --> 00:03:50.243
And that is saved now in my root, so if I quit it,

78
00:03:51.290 --> 00:03:54.700
we can see we have the file right here.

79
00:03:54.700 --> 00:03:57.110
So this is the file that contains the code

80
00:03:57.110 --> 00:04:00.810
that we want to inject into any web page that loads

81
00:04:00.810 --> 00:04:02.393
on the target computer.

82
00:04:03.270 --> 00:04:07.500
The next step is to go to our HSTS hijack plugin.

83
00:04:07.500 --> 00:04:11.480
So as I showed you before, this was in user, local, share,

84
00:04:11.480 --> 00:04:15.200
bettercap, caplets, HSTS hijack,

85
00:04:15.200 --> 00:04:18.440
make sure you use the one that I included in the resources,

86
00:04:18.440 --> 00:04:21.650
not the one that comes built in with bettercap,

87
00:04:21.650 --> 00:04:25.690
because the built in one will not work as you wanted.

88
00:04:25.690 --> 00:04:28.190
So in here we have the hstshijack.cap file.

89
00:04:30.090 --> 00:04:33.580
This is the configuration file for the whole plugin.

90
00:04:33.580 --> 00:04:35.490
So I'm gonna right click this

91
00:04:35.490 --> 00:04:38.410
and open it with my text editor.

92
00:04:38.410 --> 00:04:40.660
And in here, what we want to modify

93
00:04:40.660 --> 00:04:43.240
is the payloads right here.

94
00:04:43.240 --> 00:04:44.520
So as you can see in here,

95
00:04:44.520 --> 00:04:47.070
it's already injecting a JavaScript file

96
00:04:47.070 --> 00:04:51.150
called keylogger.js, but we also want to inject

97
00:04:51.150 --> 00:04:52.950
our own code.

98
00:04:52.950 --> 00:04:55.237
So I'm gonna add a comma here.

99
00:04:55.237 --> 00:04:59.090
And I'm gonna add star followed by a colon.

100
00:04:59.090 --> 00:05:02.730
We added this star right here to say that I want to inject

101
00:05:02.730 --> 00:05:07.250
my script into any page that the target loads.

102
00:05:07.250 --> 00:05:10.670
If you want to inject your code into specific domains,

103
00:05:10.670 --> 00:05:14.250
then you can remove the star and just list the domains

104
00:05:14.250 --> 00:05:18.220
that you want to inject this code in right here.

105
00:05:18.220 --> 00:05:21.400
But like I said, we want to inject this into all pages.

106
00:05:21.400 --> 00:05:23.727
So I'm gonna put this as a star.

107
00:05:23.727 --> 00:05:27.770
And after the colon, I'm gonna put the location

108
00:05:27.770 --> 00:05:31.000
of the JavaScript file that I want to inject

109
00:05:31.000 --> 00:05:32.163
into the browser.

110
00:05:33.030 --> 00:05:34.690
So if we look back in here,

111
00:05:34.690 --> 00:05:36.760
this is the file that we just created,

112
00:05:36.760 --> 00:05:41.760
which is in root in my home, and it's called alert.js.

113
00:05:41.860 --> 00:05:46.010
So I'm gonna put in here, I'm just gonna say forward slash

114
00:05:46.010 --> 00:05:51.010
root, followed by alert.js.

115
00:05:52.460 --> 00:05:53.900
And that's it.

116
00:05:53.900 --> 00:05:57.620
I'm gonna save this Ctrl S and quit it Ctrl Q,

117
00:05:57.620 --> 00:05:59.930
and we are ready to go.

118
00:05:59.930 --> 00:06:03.881
So I'm gonna go to my terminal, I'm gonna run bettercap

119
00:06:03.881 --> 00:06:06.690
using the exact same command that we've been using.

120
00:06:06.690 --> 00:06:09.950
So we're just giving it the interface as eth0,

121
00:06:09.950 --> 00:06:13.360
and we're giving it our spool file to automatically run ARPX

122
00:06:13.360 --> 00:06:16.453
spoofing attack, putting us in the middle of the connection.

123
00:06:17.700 --> 00:06:19.970
And as you can see, this is working with no errors,

124
00:06:19.970 --> 00:06:21.940
so everything is perfect.

125
00:06:21.940 --> 00:06:24.250
What I also want to do right now is run

126
00:06:24.250 --> 00:06:26.820
my HSTS hijack plugin.

127
00:06:26.820 --> 00:06:30.700
And as you know, all we have to do is just type H S and tab,

128
00:06:30.700 --> 00:06:33.810
this will autocomplete, I'm gonna hit Enter,

129
00:06:33.810 --> 00:06:36.190
and everything is running with no errors at all.

130
00:06:36.190 --> 00:06:38.420
So everything is perfect.

131
00:06:38.420 --> 00:06:41.450
And as you can see in here, it's saying that the payloads,

132
00:06:41.450 --> 00:06:44.760
it's loading the JavaScript payloads are the keylogger.

133
00:06:44.760 --> 00:06:48.620
This is the default one that the file already was loading.

134
00:06:48.620 --> 00:06:51.050
And the one that we just specified,

135
00:06:51.050 --> 00:06:53.863
which is in root alerts.js.

136
00:06:54.730 --> 00:06:58.550
So now anytime our target loads any web page,

137
00:06:58.550 --> 00:07:01.746
the whatever code we put in the alert.js

138
00:07:01.746 --> 00:07:04.830
should be injected in the loaded page,

139
00:07:04.830 --> 00:07:06.623
and it should get executed.

140
00:07:07.580 --> 00:07:10.530
The result of that should show us a simple message

141
00:07:10.530 --> 00:07:12.663
saying test JavaScript.

142
00:07:13.710 --> 00:07:15.920
So let's go to the target.

143
00:07:15.920 --> 00:07:18.830
And as usual, a good idea is just to remove the browsing

144
00:07:18.830 --> 00:07:22.600
data just to make sure that nothing is cached.

145
00:07:22.600 --> 00:07:26.620
And I always like to first test with the simplest case,

146
00:07:26.620 --> 00:07:29.620
and then move on to more complex scenarios.

147
00:07:29.620 --> 00:07:33.060
So first of all, I'm gonna test it against a normal HTTP

148
00:07:33.060 --> 00:07:35.610
page, so that there is nothing to bypass,

149
00:07:35.610 --> 00:07:37.520
no encryption whatsoever.

150
00:07:37.520 --> 00:07:40.173
So we're just gonna go to volnweb.com.

151
00:07:42.100 --> 00:07:44.700
And perfect, as you can see, we have an alert message

152
00:07:44.700 --> 00:07:47.400
in here telling us JavaScript test.

153
00:07:47.400 --> 00:07:50.490
So basically, this means the JavaScript code

154
00:07:50.490 --> 00:07:55.083
in my alert.js file got injected into this page.

155
00:07:56.490 --> 00:08:01.230
So now that we verified it works against normal HTTP pages,

156
00:08:01.230 --> 00:08:04.900
let's go ahead and test it against a page that uses HTTPS

157
00:08:06.300 --> 00:08:08.993
such as stackoverflow.com.

158
00:08:10.450 --> 00:08:13.290
Perfect, it's working as expected.

159
00:08:13.290 --> 00:08:16.603
Another example would be linkedin.com.

160
00:08:18.390 --> 00:08:21.670
Keep in mind, these websites use HTTPS.

161
00:08:21.670 --> 00:08:25.400
And as you can see, we're able to load them with no HTTPS

162
00:08:25.400 --> 00:08:27.810
in here, so over HTTP only.

163
00:08:27.810 --> 00:08:29.830
So even if you log in right here,

164
00:08:29.830 --> 00:08:31.490
you'll be able to get the username

165
00:08:31.490 --> 00:08:33.733
and the password as shown before.

166
00:08:35.010 --> 00:08:38.930
Finally, let's go and tested against HSTS website

167
00:08:38.930 --> 00:08:43.010
using the partial HSTS bypass method that I showed you.

168
00:08:43.010 --> 00:08:45.730
So for that to work, we'll need to go to Google

169
00:08:45.730 --> 00:08:48.620
first of all and we need to go to a Google domain

170
00:08:48.620 --> 00:08:52.830
that does not use HSTS, similar to google.ie.

171
00:08:52.830 --> 00:08:56.290
This is actually the local Google website for Ireland.

172
00:08:56.290 --> 00:08:58.170
And as you can see, the code works.

173
00:08:58.170 --> 00:08:59.030
This is fine.

174
00:08:59.030 --> 00:09:01.763
Google only uses HTTPS anyway.

175
00:09:02.610 --> 00:09:04.770
But let's look for Facebook.

176
00:09:04.770 --> 00:09:08.180
Now we know Facebook uses HSTS.

177
00:09:08.180 --> 00:09:12.700
And because HSTS is used, we should not be able

178
00:09:12.700 --> 00:09:14.990
to inject anything on the website,

179
00:09:14.990 --> 00:09:18.113
because the browser will only load it over HTTPS.

180
00:09:19.260 --> 00:09:21.950
But using our partial bypass method.

181
00:09:21.950 --> 00:09:25.460
If I click on Facebook from here, as you can see,

182
00:09:25.460 --> 00:09:27.370
the code gets executed.

183
00:09:27.370 --> 00:09:31.180
Because what we're loading right now is Facebook.corn,

184
00:09:31.180 --> 00:09:32.803
not facebook.com.

185
00:09:34.220 --> 00:09:37.020
And as you can see, we get a normal Facebook page again,

186
00:09:37.020 --> 00:09:38.390
that looks identical.

187
00:09:38.390 --> 00:09:41.360
And if you log in, you'll be able to get the username

188
00:09:41.360 --> 00:09:42.393
and the password.

189
00:09:44.020 --> 00:09:47.090
So as you can see, this will work against HTTP

190
00:09:47.090 --> 00:09:52.090
and HTTPS pages and even HSTS if the target searches

191
00:09:52.860 --> 00:09:57.540
for that website, not if they put the domain name in here.

192
00:09:57.540 --> 00:10:02.440
So if the target comes in and literally types facebook.com

193
00:10:02.440 --> 00:10:07.440
manually and hit enter, the browser will force the HTTPS

194
00:10:07.470 --> 00:10:10.720
connection as you can see in here, because like I said,

195
00:10:10.720 --> 00:10:14.390
it has a pre loaded list of websites that it can only load

196
00:10:14.390 --> 00:10:19.390
over HTTPS and because the browser is establishing HTTPS

197
00:10:19.990 --> 00:10:22.740
connection, the data will be encrypted,

198
00:10:22.740 --> 00:10:26.403
and therefore we want to be able to inject anything in it.

