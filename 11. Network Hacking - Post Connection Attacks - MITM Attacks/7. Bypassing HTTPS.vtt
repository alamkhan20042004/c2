WEBVTT

00:00.570 --> 00:02.940
Instructor: Now, everything that we did so far

00:02.940 --> 00:06.243
will only work against HTTP pages.

00:07.080 --> 00:09.570
The reason why it works against HTTP,

00:09.570 --> 00:13.140
because as we've seen, the data in HTTP

00:13.140 --> 00:15.150
is sent as plain text.

00:15.150 --> 00:20.150
So it's text that human like us can read and understand.

00:20.280 --> 00:22.230
That's why when we're the man in the middle,

00:22.230 --> 00:23.820
we're able to read this text

00:23.820 --> 00:28.410
and if we wanted, we're able to modify this text as we wish.

00:28.410 --> 00:30.540
Now, this is obviously a problem

00:30.540 --> 00:34.593
and this problem was fixed in HTPPS.

00:35.610 --> 00:40.610
So as you know, most websites use HTTPS.

00:41.010 --> 00:42.330
The reason why, like I said,

00:42.330 --> 00:45.840
because it's a more secure version of HTTP

00:45.840 --> 00:48.330
and basically the way it works is,

00:48.330 --> 00:51.720
it adds an extra layer over HTTP,

00:51.720 --> 00:53.820
which is where the S comes from.

00:53.820 --> 00:56.760
So it's a secure HTTP protocol

00:56.760 --> 01:01.500
and this extra layer will encrypt the plain text data

01:01.500 --> 01:03.570
that HTTP sends.

01:03.570 --> 01:07.050
So if a person manages to become the man in the middle,

01:07.050 --> 01:09.240
they will be able to read this data,

01:09.240 --> 01:11.010
but the data will be gibberish.

01:11.010 --> 01:13.170
It will not be readable

01:13.170 --> 01:16.680
to the person intercepting the connection.

01:16.680 --> 01:21.680
Now, HTTPS relies on TLS or SSL to encrypt the data

01:22.620 --> 01:25.770
and this is very difficult to break.

01:25.770 --> 01:30.330
Therefor, in order to bypass this, the easiest method

01:30.330 --> 01:35.330
is to downgrade HTTPS connections to HTTP.

01:35.580 --> 01:37.710
So since we're the man in the middle,

01:37.710 --> 01:42.510
we can check is the target is requesting a HTTPS website

01:42.510 --> 01:46.050
and instead of giving him the HTTPS version

01:46.050 --> 01:50.610
of that website, we will give him the HTTP version.

01:50.610 --> 01:53.550
This way, the data will be sent in plain text

01:53.550 --> 01:55.170
and we'll be able to read it

01:55.170 --> 01:58.920
exactly as I showed you in the previous lecture.

01:58.920 --> 02:01.530
Luckily, Bettercap has a caplet

02:01.530 --> 02:04.350
that does all of that for us.

02:04.350 --> 02:07.230
I also modified this caplet myself

02:07.230 --> 02:11.670
to get it to work more reliably and on more websites.

02:11.670 --> 02:15.390
So please make sure you use the custom Kali image

02:15.390 --> 02:17.040
that I made for this course,

02:17.040 --> 02:21.300
because it comes with this modified caplet by default.

02:21.300 --> 02:23.670
If you want to use the original Kali,

02:23.670 --> 02:27.240
then you're gonna have to manually download this caplet

02:27.240 --> 02:29.103
and put it in the right path.

02:30.240 --> 02:32.910
I am using the custom Kali in here,

02:32.910 --> 02:35.400
so I won't need to do any of that.

02:35.400 --> 02:38.490
I can simply run Bettercap and use it,

02:38.490 --> 02:39.930
but before doing that,

02:39.930 --> 02:43.410
I just want to go to the home directory

02:43.410 --> 02:45.690
and modify the spoof caplet

02:45.690 --> 02:49.140
that we have been using in the previous lectures.

02:49.140 --> 02:51.360
I just wanna modify one thing in this,

02:51.360 --> 02:55.650
so I'm gonna right click it and open it with Leafpad

02:55.650 --> 02:57.660
and what I wanna modify is,

02:57.660 --> 03:01.293
I want to add an option to the sniff in here.

03:02.310 --> 03:05.370
So as you know, this line, net.sniff on

03:05.370 --> 03:09.240
will turn on my sniffer, but before turning it on,

03:09.240 --> 03:14.240
I want to set the net.sniff.local to true.

03:18.090 --> 03:20.130
And what this option will do,

03:20.130 --> 03:23.670
it will tell Bettercap to sniff all data,

03:23.670 --> 03:27.750
even if it thinks this data is local data.

03:27.750 --> 03:30.510
The reason why I set this option to true,

03:30.510 --> 03:34.980
because once we use the HTTPS bypass caplet,

03:34.980 --> 03:39.630
the data will seem as if it's being sent from our computer.

03:39.630 --> 03:42.780
So Bettercap will think these passwords belong to me,

03:42.780 --> 03:46.980
to my computer, and it will not display it to me on screen.

03:46.980 --> 03:48.960
That's why we're setting it to true

03:48.960 --> 03:51.570
so that we can see all the usernames

03:51.570 --> 03:54.030
and the passwords sent on the websites

03:54.030 --> 03:58.053
that we will downgrade from HTTPS to HTTP.

03:59.400 --> 04:01.890
So I'm gonna save, CONTROL + S

04:01.890 --> 04:06.690
and quit it, CONTROL + Q and now we are actually ready

04:06.690 --> 04:11.690
to go and see how we can downgrade HTTPS to HTTP

04:11.790 --> 04:15.300
and steal passwords from login pages

04:15.300 --> 04:18.693
that use HTTPS by default.

04:19.800 --> 04:22.140
So I'm gonna go to my terminal

04:22.140 --> 04:24.270
and I'm gonna use Bettercap,

04:24.270 --> 04:27.180
exactly as I've been using it before.

04:27.180 --> 04:29.940
So we're doing bettercap, the name of the program,

04:29.940 --> 04:33.780
we're giving it our interface after the iface argument.

04:33.780 --> 04:37.710
We're using the caplet argument to specify a caplet to run

04:37.710 --> 04:40.080
as soon as we run the program

04:40.080 --> 04:41.820
and we're running this spoof caplet,

04:41.820 --> 04:44.430
the one that we built in the previous lecture

04:44.430 --> 04:46.800
that run the ARP spoofing command

04:46.800 --> 04:48.543
and run the sniffer for us.

04:49.380 --> 04:52.710
So I'm gonna hit ENTER and as you can see,

04:52.710 --> 04:55.740
everything got executed as expected.

04:55.740 --> 04:59.580
If we do help, we'll see all the running modules

04:59.580 --> 05:03.210
and we have the ARP spoof and the sniffer running

05:03.210 --> 05:05.760
with the recon and with the probe.

05:05.760 --> 05:08.883
So this is exactly what we wanted from our caplet.

05:09.780 --> 05:13.380
So first of all, the HSTS bypass caplet

05:13.380 --> 05:17.550
is one of many caplets that Bettercap comes with.

05:17.550 --> 05:20.040
If you want to list all of these caplets,

05:20.040 --> 05:23.470
you can do caplets.show

05:25.650 --> 05:29.580
and as you can see, you'll get a list of all of the caplets

05:29.580 --> 05:33.423
that you have and their location on the system.

05:34.260 --> 05:36.600
Now, the caplet that we want to run

05:36.600 --> 05:41.010
is the hstshijack caplet, this one right here.

05:41.010 --> 05:42.900
And to run any of these caplets,

05:42.900 --> 05:46.680
all you have to do is literally just type its name.

05:46.680 --> 05:49.890
And as usual, you can use the TAB to auto complete.

05:49.890 --> 05:52.410
So to run our caplet right here,

05:52.410 --> 05:57.180
all I have to do is literally type HS and press TAB

05:57.180 --> 05:58.140
and as you can see,

05:58.140 --> 06:01.140
it will automatically auto complete for me

06:01.140 --> 06:03.660
and type the caplet name.

06:03.660 --> 06:06.330
Now if I hit ENTER, this will load the caplet

06:06.330 --> 06:10.020
with all of its options and it will run it for me.

06:10.020 --> 06:12.780
So as you can see, because we don't see any errors,

06:12.780 --> 06:16.530
this means everything got executed as expected,

06:16.530 --> 06:18.780
so let's go the Windows machine,

06:18.780 --> 06:23.610
browse some HTTPS pages and see if we can sniff data,

06:23.610 --> 06:25.770
usernames, passwords and URLS

06:25.770 --> 06:28.023
that they enter on their computer.

06:29.250 --> 06:31.650
So I have my Windows machine here.

06:31.650 --> 06:33.390
I have Chrome installed.

06:33.390 --> 06:35.550
This is the latest version of Chrome

06:35.550 --> 06:38.190
at the time of recording this lecture.

06:38.190 --> 06:41.100
A really good idea before trying all of these things

06:41.100 --> 06:43.200
is to removes your browsing data,

06:43.200 --> 06:46.380
because the websites that we're gonna try to access

06:46.380 --> 06:48.360
might be cached and they might be

06:48.360 --> 06:50.370
just loaded from your cache.

06:50.370 --> 06:52.200
This will only happen if you're visiting

06:52.200 --> 06:54.480
the same website over and over again,

06:54.480 --> 06:57.600
mostly when testing, therefor, it's a really good idea

06:57.600 --> 07:00.120
to CONTROL + SHIFT + DELETE

07:00.120 --> 07:03.720
and click on clear browsing data,

07:03.720 --> 07:05.460
make sure all of this is clicked.

07:05.460 --> 07:07.530
Make sure it's set to all the time

07:07.530 --> 07:10.920
and click on clear to remove all of it

07:10.920 --> 07:15.920
and let's go ahead and go to a website that uses HTTPS.

07:15.930 --> 07:19.083
A good example would be linkedin.com.

07:21.990 --> 07:24.840
And perfect, if you look here at the top,

07:24.840 --> 07:29.513
you'll see the website is loading over HTTP, not over HTTPS,

07:30.450 --> 07:33.240
therefor, we'll be able to see anything

07:33.240 --> 07:35.703
the user enters in these boxes.

07:36.690 --> 07:38.160
So let's put a username,

07:38.160 --> 07:43.160
let's set it zaid@zsecurity.org

07:44.310 --> 07:46.950
and I'll out a password as one, two, three,

07:46.950 --> 07:49.020
four, five, six, seven, eight, nine, zero,

07:49.020 --> 07:51.750
doesn't really matter, you can use any password.

07:51.750 --> 07:54.273
And I'm gonna hit ENTER to log in.

07:55.620 --> 07:58.800
This is wrong, so obviously we're getting an error message,

07:58.800 --> 08:00.930
but if we go back to Kali,

08:00.930 --> 08:03.540
as you can see, we're capturing all of this data,

08:03.540 --> 08:07.290
because it's not being sent over HTTPS anymore.

08:07.290 --> 08:09.513
It's being sent over HTTP.

08:10.920 --> 08:12.600
And if you look in here,

08:12.600 --> 08:15.750
you can see we captured log in information.

08:15.750 --> 08:18.750
It's sent to linkedin.com,

08:18.750 --> 08:23.010
sent to this specific URL, our log in URL

08:23.010 --> 08:27.540
and you can see the username is zaid@zsecurity.org

08:27.540 --> 08:29.219
and the password is one, two, three,

08:29.219 --> 08:31.923
all the way up to nine, zero.

08:32.940 --> 08:34.830
So that's really, really good.

08:34.830 --> 08:38.100
Let's go ahead and test another HTTPS website.

08:38.100 --> 08:41.103
Let's go to stackoverflow.com.

08:43.350 --> 08:44.850
Again, you can see on top,

08:44.850 --> 08:48.780
it's loading over HTTP, not HTTPS.

08:48.780 --> 08:50.680
So I'm gonna click on log in

08:51.840 --> 08:55.920
and again, I'm gonna put my email, zaid@zsecurity.org

08:55.920 --> 08:58.290
and we'll put a password as one, two, three,

08:58.290 --> 09:01.710
four, five, six, seven, eight, nine, zero.

09:01.710 --> 09:06.600
Hit ENTER and let's go to the Kali machine again.

09:06.600 --> 09:09.213
Scroll down this time, 'cause we're stuck on top.

09:10.290 --> 09:14.010
And perfect, you can see we have a post request in here.

09:14.010 --> 09:15.960
It's sent to this specific URL.

09:15.960 --> 09:18.330
Again, you can see log in the URL.

09:18.330 --> 09:22.260
You can see the website itself, stackoverflow.com

09:22.260 --> 09:25.350
and if we scroll down a little bit more,

09:25.350 --> 09:30.350
we can see that the username is zaid@zsecurity.org

09:31.590 --> 09:33.690
and the password again, one, two, three,

09:33.690 --> 09:35.733
all the way up to nine, zero.

09:37.020 --> 09:39.180
So that is really, really good.

09:39.180 --> 09:44.180
Now we can downgrade any HTTPS connection to HTTP

09:45.150 --> 09:50.150
as long as the target website uses HTTPS not HSTS.

09:52.200 --> 09:55.860
So this method will work against pretty much all websites

09:55.860 --> 10:00.750
that use HTTPS, except for the really popular websites,

10:00.750 --> 10:04.440
such as Facebook, Twitter and so on.

10:04.440 --> 10:06.510
So let me show you a quick example.

10:06.510 --> 10:10.533
If I go here and try to go to Facebook.com,

10:12.540 --> 10:15.360
you'll see that the website got loaded

10:15.360 --> 10:19.560
over HTTPS, not over HTTP,

10:19.560 --> 10:24.000
even though we configured our caplet correctly

10:24.000 --> 10:28.350
and even though we're able to downgrade HTTPS connections

10:28.350 --> 10:33.003
on a lot of websites such as LinkedIn and Stack Overflow.

10:34.140 --> 10:38.400
This is happening because Facebook is using HSTS,

10:38.400 --> 10:41.343
which is a little bit trickier to bypass.

10:42.270 --> 10:43.260
In the next lecture,

10:43.260 --> 10:46.410
we'll talk more about what HSTS is,

10:46.410 --> 10:48.420
why it's tricky to bypass

10:48.420 --> 10:51.060
and how to partially bypass it

10:51.060 --> 10:53.700
and still get usernames and passwords

10:53.700 --> 10:55.800
from the websites that implement it,

10:55.800 --> 10:59.013
such as Facebook, Twitter and so on.
