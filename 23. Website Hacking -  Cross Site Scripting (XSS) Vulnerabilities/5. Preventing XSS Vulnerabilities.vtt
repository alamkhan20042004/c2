WEBVTT

1
00:00:01.200 --> 00:00:02.660
<v Zaid>Now let's talk about</v>

2
00:00:02.660 --> 00:00:05.303
how we can prevent XSS vulnerabilities.

3
00:00:06.280 --> 00:00:08.750
The way these vulnerabilities happen is

4
00:00:08.750 --> 00:00:11.470
because whenever a user enters something

5
00:00:11.470 --> 00:00:12.590
into a text box

6
00:00:12.590 --> 00:00:14.360
or into a parameter,

7
00:00:14.360 --> 00:00:17.820
that input is displayed into the HTML.

8
00:00:17.820 --> 00:00:20.710
So it's treated as if it's part of the page,

9
00:00:20.710 --> 00:00:23.200
and therefore, if there is JavaScript in it,

10
00:00:23.200 --> 00:00:25.003
the code is being executed.

11
00:00:25.930 --> 00:00:28.480
So, to prevent this exploit,

12
00:00:28.480 --> 00:00:30.060
the best thing to do is to try

13
00:00:30.060 --> 00:00:33.540
and minimize the usage of untrusted input.

14
00:00:33.540 --> 00:00:35.570
So anytime a user inputs something

15
00:00:35.570 --> 00:00:38.340
or anytime something's input from parameters,

16
00:00:38.340 --> 00:00:40.380
try to minimize that.

17
00:00:40.380 --> 00:00:41.540
Also, make sure

18
00:00:41.540 --> 00:00:43.780
that you always escape whatever

19
00:00:43.780 --> 00:00:45.810
that's going to be displayed

20
00:00:45.810 --> 00:00:48.230
or used into the HTML page,

21
00:00:48.230 --> 00:00:50.890
because XSS can not only be injected

22
00:00:50.890 --> 00:00:53.760
into places where things are displayed on the page,

23
00:00:53.760 --> 00:00:57.060
but it can also be injected into parameters

24
00:00:57.060 --> 00:00:59.873
of certain elements of the HTML page.

25
00:01:02.050 --> 00:01:04.350
So what I mean by escaping is

26
00:01:04.350 --> 00:01:06.840
converting each of these characters to

27
00:01:06.840 --> 00:01:10.550
what they would be represented by in HTML.

28
00:01:10.550 --> 00:01:12.190
You can do that using scripts,

29
00:01:12.190 --> 00:01:14.353
and you can do that using your own script.

30
00:01:15.310 --> 00:01:16.850
Now, let me show you how this happens.

31
00:01:16.850 --> 00:01:19.180
Now I'm here at my vulnerable webpage

32
00:01:19.180 --> 00:01:20.250
that we were using,

33
00:01:20.250 --> 00:01:22.050
and I'm gonna go to the storage one.

34
00:01:22.940 --> 00:01:23.880
And obviously you can see

35
00:01:23.880 --> 00:01:27.180
that every time we click on that, the XSS runs.

36
00:01:27.180 --> 00:01:29.030
So let's inspect this element.

37
00:01:29.030 --> 00:01:32.870
Now this element is where we injected our alert.

38
00:01:32.870 --> 00:01:34.330
And if we right click

39
00:01:34.330 --> 00:01:36.700
and go on inspect element,

40
00:01:36.700 --> 00:01:40.710
it will show us the HTML of this page,

41
00:01:40.710 --> 00:01:43.650
or the HTML of this particular element right here,

42
00:01:43.650 --> 00:01:44.483
highlighted.

43
00:01:46.210 --> 00:01:47.783
So I'm gonna make this bigger.

44
00:01:49.420 --> 00:01:51.870
And if we look at it right here, you'll see

45
00:01:51.870 --> 00:01:53.083
that we have the name,

46
00:01:54.410 --> 00:01:55.363
and that's Zaid.

47
00:01:56.460 --> 00:01:59.690
And then the other input, which is the message,

48
00:01:59.690 --> 00:02:00.760
it's a script,

49
00:02:00.760 --> 00:02:02.430
and the script what the script does

50
00:02:02.430 --> 00:02:03.820
it does alert exercise.

51
00:02:03.820 --> 00:02:06.650
So it's exactly what we injected into it

52
00:02:06.650 --> 00:02:07.893
when we did the comment.

53
00:02:09.390 --> 00:02:11.410
So every time we were on this page,

54
00:02:11.410 --> 00:02:14.670
this piece of code is executed

55
00:02:14.670 --> 00:02:15.880
So what we need to do is

56
00:02:15.880 --> 00:02:18.860
we need to make sure every time a user enters something

57
00:02:18.860 --> 00:02:21.650
and that something will be displayed on a page,

58
00:02:21.650 --> 00:02:24.870
or that something will be used somewhere in the elements.

59
00:02:24.870 --> 00:02:26.760
So even the ID here

60
00:02:26.760 --> 00:02:30.090
or even the H, the ID is just, for example,

61
00:02:30.090 --> 00:02:31.970
is a parameter of the div,

62
00:02:31.970 --> 00:02:34.360
it's not displayed, you never see this ID,

63
00:02:34.360 --> 00:02:38.070
but this can be injectable, can be injected as well.

64
00:02:38.070 --> 00:02:40.820
So hackers can actually try to inject stuff

65
00:02:40.820 --> 00:02:43.360
into the parameters, they can try to inject stuff

66
00:02:43.360 --> 00:02:45.650
into the image attributes, for example,

67
00:02:45.650 --> 00:02:46.920
they can do an image

68
00:02:46.920 --> 00:02:48.830
and inject stuff into the source

69
00:02:48.830 --> 00:02:50.250
or into the URL.

70
00:02:50.250 --> 00:02:52.380
So this is just an example here.

71
00:02:52.380 --> 00:02:55.840
And every time users input is going to be used

72
00:02:55.840 --> 00:02:58.190
anywhere on the page, so even if you don't see it,

73
00:02:58.190 --> 00:03:01.080
if you usually don't see it, you need to make sure

74
00:03:01.080 --> 00:03:03.080
that you escape that input

75
00:03:03.080 --> 00:03:04.020
and make sure

76
00:03:04.020 --> 00:03:05.940
that it does not contain any code,

77
00:03:05.940 --> 00:03:07.130
and if it contains any code

78
00:03:07.130 --> 00:03:09.960
that it's converted to an equivalent

79
00:03:09.960 --> 00:03:11.660
that the code will not be running.

80
00:03:11.660 --> 00:03:14.290
So it's converted to its HTTP equivalent,

81
00:03:14.290 --> 00:03:17.100
so that you'll actually, once you escape this,

82
00:03:17.100 --> 00:03:19.240
you'll actually see this in the message.

83
00:03:19.240 --> 00:03:22.250
So you see the message as script alert XSS,

84
00:03:22.250 --> 00:03:25.110
but it will never be executed.

85
00:03:25.110 --> 00:03:27.670
This script will never actually be executed

86
00:03:27.670 --> 00:03:29.723
on the target person when they run it.

87
00:03:32.280 --> 00:03:34.930
Now as a user, to prevent yourself

88
00:03:34.930 --> 00:03:38.170
from being used into an XSS attack.

89
00:03:38.170 --> 00:03:40.320
Now, the URL coming to you will probably

90
00:03:40.320 --> 00:03:43.440
look like a URL of a trusted website, for example,

91
00:03:43.440 --> 00:03:44.460
let's assume

92
00:03:44.460 --> 00:03:46.180
that you work in a company

93
00:03:46.180 --> 00:03:48.520
and there was an XSS in your company,

94
00:03:48.520 --> 00:03:50.530
and you are logging into your company

95
00:03:50.530 --> 00:03:52.600
and the code gets executed on you,

96
00:03:52.600 --> 00:03:54.930
then there isn't much you can do yourself.

97
00:03:54.930 --> 00:03:56.270
But, you need to be careful.

98
00:03:56.270 --> 00:03:58.760
So with BeEF, we saw in order to exploit

99
00:03:58.760 --> 00:04:00.970
the vulnerabilities, we were showing, for example,

100
00:04:00.970 --> 00:04:02.220
a fake update.

101
00:04:02.220 --> 00:04:05.530
So make sure when you, if you get a message always

102
00:04:05.530 --> 00:04:06.670
that there is an update,

103
00:04:06.670 --> 00:04:09.570
make sure you actually go to the website

104
00:04:09.570 --> 00:04:11.410
that provides that application.

105
00:04:11.410 --> 00:04:12.540
So if Firefox said

106
00:04:12.540 --> 00:04:16.610
that there's an update, go to the website of Firefox

107
00:04:16.610 --> 00:04:19.000
and see if there is actually an update.

108
00:04:19.000 --> 00:04:21.960
And if there is, download it from that website,

109
00:04:21.960 --> 00:04:25.090
don't download it from the notification that you got.

110
00:04:25.090 --> 00:04:28.860
Also make sure you're downloading it from an HTTPS website.

111
00:04:28.860 --> 00:04:31.740
And once you download it, you can inspect it

112
00:04:31.740 --> 00:04:33.250
and check it the same way

113
00:04:33.250 --> 00:04:35.090
that we've seen before to make sure

114
00:04:35.090 --> 00:04:37.803
that there is no backdoors or anything in it.

115
00:04:38.717 --> 00:04:41.310
You can also check the md5sum, to make sure

116
00:04:41.310 --> 00:04:43.300
that the file hasn't been manipulated

117
00:04:43.300 --> 00:04:45.580
while it was being downloaded.

118
00:04:45.580 --> 00:04:47.880
The same when we did the fake Facebook login

119
00:04:47.880 --> 00:04:51.660
when you are with BeEF, so what you can do is

120
00:04:51.660 --> 00:04:52.980
whenever you're told

121
00:04:52.980 --> 00:04:55.550
that you got logged out, please log back in,

122
00:04:55.550 --> 00:04:57.100
again, ignore that.

123
00:04:57.100 --> 00:05:00.770
Go to facebook.com, make sure it's going through HTTPS,

124
00:05:00.770 --> 00:05:02.563
and then log in to Facebook.

125
00:05:04.870 --> 00:05:08.930
So, always try to be careful with notifications popping up

126
00:05:08.930 --> 00:05:10.640
telling you you need to do stuff.

127
00:05:10.640 --> 00:05:11.640
Always be wary

128
00:05:11.640 --> 00:05:12.713
and never trust them.

